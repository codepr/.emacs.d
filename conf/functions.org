#+begin_src emacs-lisp
;;; functions.org --- Codep's custom functions.
;;; Commentary:
;; This file contain my personal emacs enhanced functions.
;;; code:

(defun my/move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.
Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.
If point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(global-set-key (kbd "C-a") 'my/move-beginning-of-line)

(defun my/indent-buffer ()
  "Indent the currently visited buffer."
  (interactive)
  (indent-region (point-min) (point-max)))

(defun my/indent-region-or-buffer ()
  "Indent a region if selected, otherwise the whole buffer."
  (interactive)
  (save-excursion
    (if (region-active-p)
        (progn
          (indent-region (region-beginning) (region-end))
          (message "Indented selected region."))
      (progn
        (my/indent-buffer)
        (message "Indented buffer.")))
    (whitespace-cleanup)))

(global-set-key (kbd "C-c i") 'my/indent-region-or-buffer)

(defun my/smart-open-line ()
  "Insert an empty line after he current line.
Position the cursor at it's beginning."
  (interactive)
  (move-end-of-line nil)
  (newline-and-indent))

(defun my/smart-open-line-above ()
  "Insert an empty line above the current line.
Position the cursors at it's beginning."
  (interactive)
  (move-beginning-of-line nil)
  (newline-and-indent)
  (forward-line -1)
  (indent-according-to-mode))

(global-set-key (kbd "C-o") 'my/smart-open-line)
(global-set-key (kbd "M-o") 'my/smart-open-line-above)

(defun my/comment-or-uncomment-region ()
  "Comment or uncomment a region.
Comment the current line if there's no active region."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)))

(global-set-key (kbd "C-c c") 'my/comment-or-uncomment-region)

(defun my/kill-ring-save ()
  "Copy the region selected or the current line if no region is active."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (kill-ring-save beg end)))

(global-set-key (kbd "M-w") 'my/kill-ring-save)

;; (defun get-point (symbol &optional arg)
;;   "get the point"
;;   (funcall symbol arg)
;;   (point))
;;
;; (defun my/kill-ring-save-word (&optional arg)
;;   "Copy the word under the cursor"
;;   (interactive)
;;   (save-excursion
;;     (let ((beg (get-point 'backward-word 1))
;;       (end (get-point 'forward-word arg)))
;;       (kill-ring-save beg end))))
;;
;; (global-set-key (kbd "C-c M-w") 'my/kill-ring-save-word)

(defvar current-theme 1)
;; (defvar starting-theme 'tao-yin)
;; (defvar starting-theme 'spacemacs-dark)
(defvar starting-theme 'base16-apathy)
;; (defvar starting-theme 'codep-atom-one-dark)
;; (defvar starting-theme 'doom-one)
;; (defvar starting-theme 'planet)
;; (defvar starting-theme 'grandshell)
;; (defvar starting-theme 'material)
(defvar ending-theme 'spacemacs-light)
(load-theme starting-theme t)

(my/set-fringe-background)
(defun my/theme-cycle-switch ()
  "Switch between stock theme and tao-yinyang theme."
  (interactive)
  (cond ((= current-theme 1)
         (disable-theme starting-theme)
         (load-theme ending-theme t)
         (my/set-fringe-background)
         (setq current-theme 0))
        ((= current-theme 0)
         (disable-theme ending-theme)
         (load-theme starting-theme t)
         (my/set-fringe-background)
         (setq current-theme 1))))

(global-set-key (kbd "<f5>") 'my/theme-cycle-switch)

;; kill all buffers
(defun kill-all-buffers ()
  (interactive)
  (mapc 'kill-buffer (buffer-list)))

(setq search-engines
      '(
        (("google" "g") "https://google.com/search?q=%s")
        (("duckduckgo" "d" "ddg") "https://duckduckgo.com/?q=%s")
        (("rfc" "r") "https://www.rfc-editor.org/rfc/rfc%s.txt")
        (("rfc-kw" "rk") "https://www.rfc-editor.org/search/rfc_search_detail.php?title=%s")
        ))
(setq search-engine-default "google")

(defun search-get-engine (engine-name engine-list)
  (cond
   ((null engine-list) nil)
   ((member engine-name (caar engine-list)) (cadar engine-list))
   (t (search-get-engine engine-name (cdr engine-list)))))

(defun search-engine (engine-name term)
  "Search for a term using an engine."
  (interactive "MEngine: \nMTerm: ")
  (let* ((url (search-get-engine engine-name search-engines)))
    (if (equal url nil)
        (message "Error: search engine \"%s\" unknown." engine-name)
      (eww (format url (url-hexify-string term))))))

(defun search-web (term)
  "Search the web using google or a specified engine."
  (interactive "MQuery: ")
  (let ((idx (position ?: term)))
    (if (equal idx nil)
        (search-engine search-engine-default term)
      (search-engine (subseq term 0 idx)
                     (subseq term (+ 1 idx))))))

(global-set-key (kbd "C-c w") 'search-web)

(defun byte-recompile-init-files ()
  "Recompile all startup files inside .emacs.d"
  (interactive)
  (byte-recompile-directory "~/.emacs.d" 0))

;; (defun next-code-buffer ()
;;   "Exclude temporary buffers * from next buffer command"
;;   (interactive)
;;   (let ((bread-crumb (buffer-name)))
;;     (next-buffer)
;;     (while
;;       (and
;;         (string-match-p "^\*" (buffer-name))
;;         (not (equal bread-crumb (buffer-name))))
;;       (next-buffer))))
;; (global-set-key [remap next-buffer] 'next-code-buffer)
;;
;; (defun previous-code-buffer ()
;;   "Exclude temporary buffers * from previous buffer command"
;;   (interactive)
;;   (let ((bread-crumb (buffer-name)))
;;     (previous-buffer)
;;     (while
;;       (and
;;         (string-match-p "^\*" (buffer-name))
;;         (not (equal bread-crumb (buffer-name))))
;;       (previous-buffer))))
;; (global-set-key [remap previous-buffer] 'next-code-buffer)
;;; functions.org ends here
#+end_src
